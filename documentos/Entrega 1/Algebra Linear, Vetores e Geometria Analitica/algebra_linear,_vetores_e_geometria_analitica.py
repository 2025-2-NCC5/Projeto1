# -*- coding: utf-8 -*-
"""Algebra Linear, Vetores e Geometria Analitica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ttqcpNGIpi2e0wFhOa6lZ0BCCwighLYE
"""

import numpy as np
import pandas as pd

dfcus = pd.read_csv("Customer_semicolon.csv", sep=";") #Coleta de dados
dfcamp = pd.read_csv("Campaign_semicolon.csv", sep=";")
dford = pd.read_csv("Order_semicolon.csv", sep=";")

genero = dfcus["gender"].value_counts(dropna=False).sort_index()   #Seleciona a quantidade de pessoas de cada genero
enrich = dfcus[dfcus["isEnriched"]==0]["gender"].value_counts(dropna=False).reindex(genero.index, fill_value=0)   #Seleciona quantos dados foram melhorados
enrichn = dfcus[dfcus["isEnriched"]==1]["gender"].value_counts(dropna=False).reindex(genero.index, fill_value=0)  #Seleciona quantos dados não foram melhorados

matrizgen = np.vstack([genero.values, enrich.values, enrichn.values])  #Monta a matriz com os dados selecionados

print(matrizgen)   #Mostra a matriz montada

df_matrizgen = pd.DataFrame(  #Estrutura da matriz com indices
    matrizgen,     #carrega a matriz
    index = ["Total", "Enriched", "Não Enriched"],
    columns = ["Feminino", "Masculino", "Outro", "Não Selecionado"]
)

print(df_matrizgen)   #Mostra a matriz

df_matrizTgen = pd.DataFrame(  #Estrutura da matriz Transposta com indices
    matrizgen.T,   #carrega a matriz e transpõe ela
    index = ["Feminino", "Masculino", "Outro", "Não Selecionado"],
    columns = ["Total", "Enriched", "Não Enriched"]
)

print(df_matrizTgen)  #Mostra a matriz transposta

statuscamp = dfcamp["status"].value_counts().sort_index()   #Seleciona quantas campanhas existem com o mesmo status
typeum = dfcamp[dfcamp["type"]==1]["status"].value_counts().reindex(statuscamp.index, fill_value=0)   #Seleciona a quantidade de campanhas promocionais
typedois = dfcamp[dfcamp["type"]==2]["status"].value_counts().reindex(statuscamp.index, fill_value=0)  #Seleciona a quantidade de campanhas institucionais

matrizcamp = np.vstack([statuscamp.values, typeum.values, typedois.values])  #Monta a matriz com os dados selecionados

print(matrizcamp)   #Mostra a matriz montada

df_matrizcamp = pd.DataFrame(  #Estrutura da matriz com indices
    matrizcamp,     #carrega a matriz
    index = ["Total", "Promocional", "Institucional"],
    columns = ["Rascunho", "Cancelado", "Publicado", "Completado"]
)

print(df_matrizcamp)   #Mostra a matriz

df_matrizTcamp = pd.DataFrame(  #Estrutura da matriz transposta com indices
    matrizcamp.T,     #carrega a matriz e transpõe ela
    index = ["Rascunho", "Cancelado", "Publicado", "Completado"],
    columns = ["Total", "Promocional", "Institucional"]
)

print(df_matrizTcamp)   #Mostra a matriz transposta

print(matrizgen)
print("\t+\t")
print(matrizcamp)
print("\t=\n")

matrizS = matrizgen + matrizcamp  #Soma entre matrizes

print(matrizS)

print(matrizgen)
print("\tX\t")
print(matrizcamp.T)
print("\t=\n")

matrizV = np.dot(matrizgen, matrizcamp.T) #Multiplicação entre matrizes

print(matrizV)

ordert = dford["orderType"].value_counts()   #Seleciona a quantidade de cada tipo de pedido

vetorord = np.stack(ordert.values)  #Coloca os dados em um vetor

print(vetorord)   #Mostra o vetor

df_ordert = ordert.to_frame().T
df_ordert.index = [""]
df_ordert.columns.name = None

print(df_ordert)